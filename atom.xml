<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可几和</title>
  
  <subtitle>学习博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://agui-coder.github.io/"/>
  <updated>2020-02-01T02:35:44.632Z</updated>
  <id>https://agui-coder.github.io/</id>
  
  <author>
    <name>agui-coder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>容器</title>
    <link href="https://agui-coder.github.io/2020/02/01/%E5%AE%B9%E5%99%A8/"/>
    <id>https://agui-coder.github.io/2020/02/01/%E5%AE%B9%E5%99%A8/</id>
    <published>2020-02-01T02:06:17.000Z</published>
    <updated>2020-02-01T02:35:44.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Coll接口"><a href="#Coll接口" class="headerlink" title="Coll接口"></a><strong>Coll接口</strong></h3><img src="source\img\rongqi.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Coll接口&quot;&gt;&lt;a href=&quot;#Coll接口&quot; class=&quot;headerlink&quot; title=&quot;Coll接口&quot;&gt;&lt;/a&gt;&lt;strong&gt;Coll接口&lt;/strong&gt;&lt;/h3&gt;&lt;img src=&quot;source\img\rongqi.jpg&quot;&gt;
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="容器" scheme="https://agui-coder.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>包装类</title>
    <link href="https://agui-coder.github.io/2020/01/31/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>https://agui-coder.github.io/2020/01/31/%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2020-01-31T04:50:37.000Z</published>
    <updated>2020-01-31T05:09:30.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a><strong>包装类</strong></h3><ul><li><p>包装类只用记住两个Integer与Character其余的只需要早原来的基本类型上首字母大写</p></li><li><p>通过包装类Integer.toString()将整型转换为字符串；</p></li><li><p>通过Integer.parseInt()将字符串转换为int类型；</p></li><li><p>通过valueOf()方法把字符串转换为包装类然后通过自动拆箱</p></li><li><p>就是把基本类型当对象处理</p></li></ul><h3 id="包装类的应用场景"><a href="#包装类的应用场景" class="headerlink" title="包装类的应用场景"></a><strong>包装类的应用场景</strong></h3><p>1、集合类泛型只能是包装类</p><ul><li>// 编译报错<br>List<int> list1 = new ArrayList&lt;&gt;();<br>//正常<br>List<Integer> list2 = new ArrayList&lt;&gt;();</li></ul><p>2、成员变量不能有默认值 </p><ul><li>private int status；<br>基本数据类型的成员变量都有默认值，如以上代码 status 默认值为 0，如果定义中 0 代表失败，那样就会有问题，这样只能使用包装类 Integer，它的默认值为 null,所以就不会有默认值影响。</li></ul><p>3、方法参数允许定义空值</p><ul><li>private static void test1(int status){<br>  System.out.println(status);<br>}<br>看以上代码，方法参数定义的是基本数据类型 int，所以必须得传一个数字过来，不能传 null，很多场合我们希望是能传递 null 的，所以这种场合用包装类比较合适。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; class=&quot;headerlink&quot; title=&quot;包装类&quot;&gt;&lt;/a&gt;&lt;strong&gt;包装类&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;包装类只用记住两个Integer与Character其余的只需要早原来的基本类型
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="包装类" scheme="https://agui-coder.github.io/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>异常处理</title>
    <link href="https://agui-coder.github.io/2020/01/31/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://agui-coder.github.io/2020/01/31/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-01-30T19:06:47.000Z</published>
    <updated>2020-01-30T19:26:49.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a><strong>捕获异常</strong></h3><ul><li>try语句指定了一段代码，该段代码就是异常捕获并处理的范围。在执行过程中，当任意一条语句产生异常时，就会跳过该条语句中后面的代码。代码中可能会产生并抛出一种或几种类型的异常对象，它后面的catch语句要分别对这些异常做相应的处理。<pre><code>一个try语句必须带有至少一个catch语句块或一个finally语句块 。当异常处理的代码执行结束以后，不会回到try语句去执行尚未执行的代码。</code></pre></li><li>catch<br>   1、每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。<br>   2、常用方法，这些方法均继承自Throwable类<br>   3、toString ()方法，显示异常的类名和产生异常的原因<br>   4、getMessage()方法，只显示产生异常的原因，但不显示类名。<br>   5、printStackTrace()方法，用来跟踪异常事件发生时堆栈的内容。<br>   6、如果异常类之间有继承关系，在顺序安排上需注意。越是顶层的类，越放在下面，再不然就直接把多余的catch省略掉。 也就是先捕获子类异常再捕获父类异常。</li><li>finally<br>   有些语句，不管是否发生了异常，都必须要执行，那么就可以把这样的语句放到finally语句块中<br>   通常在finally中关闭程序块已打开的资源，比如：关闭文件流、释放数据库连接等</li><li>注意事项<br>   1、即使try和catch块中存在return语句，finally语句也会执行。是在执行完finally语句后再通过return退出。<br>   2、finally语句块只有一种情况是不会执行的，那就是在执行finally之前遇到了System.exit(0)结束程序运行。 </li></ul><h3 id="抛出异常-throws"><a href="#抛出异常-throws" class="headerlink" title="抛出异常(throws)"></a><strong>抛出异常(throws)</strong></h3><ul><li>1、在方法中使用try-catch-finally是由这个方法来处理异常。但是在一些情况下，当前方法并不需要处理发生的异常，而是向上传递给调用它的方法处理。<br>2、如果一个方法抛出多个已检查异常，就必须在方法的首部列出所有的异常，之间以逗号隔开。<br>3、如果一个方法中可能产生某种异常，但是并不能确定如何处理这种异常，则应根据异常规范在方法的首部声明该方法可能抛出的异常。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;捕获异常&quot;&gt;&lt;a href=&quot;#捕获异常&quot; class=&quot;headerlink&quot; title=&quot;捕获异常&quot;&gt;&lt;/a&gt;&lt;strong&gt;捕获异常&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;try语句指定了一段代码，该段代码就是异常捕获并处理的范围。在执行过程中，当任
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="异常" scheme="https://agui-coder.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>常见运行时异常</title>
    <link href="https://agui-coder.github.io/2020/01/31/%E5%B8%B8%E8%A7%81%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8/"/>
    <id>https://agui-coder.github.io/2020/01/31/%E5%B8%B8%E8%A7%81%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8/</id>
    <published>2020-01-30T18:25:55.000Z</published>
    <updated>2020-01-30T18:54:13.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见"><a href="#常见" class="headerlink" title="常见"></a><strong>常见</strong></h3><ul><li>ArithmeticException异常：试图除以0</li><li>NullPointerException异常：需要加上非空判断例如                               String str=null;<pre><code>if(str!=null){    System.out.println(str.charAt(0));}</code></pre></li><li>ClassCastException异常：在引用数据类型转换时，有可能发生类型转换异常需要将引用变量转成真实的子类类型                                                                Animal a = new Dog();<pre><code>if (a instanceof Cat) {    Cat c = (Cat) a;}</code></pre>  }</li><li>ArrayIndexOutOfBoundsException异常：当程序访问一个数组的某个元素时，如果这个元素的索引超出了0~数组长度-1这个范围，则会出现数组下标越界异常需要增加边界判断                int[] arr = new int[5];<pre><code>int a = 5;if (a &lt; arr.length) {    System.out.println(arr[a]);}</code></pre></li><li>NumberFormatException异常：在使用包装类将字符串转换成基本数据类型时，如果字符串的格式不正确，则会出现数字格式异常，数字格式化异常的解决，可以引入正则表达式判断是否为数字  String str = “1234abcf”;<pre><code>Pattern p = Pattern.compile(&quot;^\\d+$&quot;);Matcher m = p.matcher(str);if (m.matches()) { // 如果str匹配代表数字的正则表达式,才会转换    System.out.println(Integer.parseInt(str));}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见&quot;&gt;&lt;a href=&quot;#常见&quot; class=&quot;headerlink&quot; title=&quot;常见&quot;&gt;&lt;/a&gt;&lt;strong&gt;常见&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ArithmeticException异常：试图除以0&lt;/li&gt;
&lt;li&gt;NullPointe
      
    
    </summary>
    
    
      <category term="异常" scheme="https://agui-coder.github.io/categories/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="运行异常" scheme="https://agui-coder.github.io/tags/%E8%BF%90%E8%A1%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Error异常</title>
    <link href="https://agui-coder.github.io/2020/01/31/Error%E5%BC%82%E5%B8%B8/"/>
    <id>https://agui-coder.github.io/2020/01/31/Error%E5%BC%82%E5%B8%B8/</id>
    <published>2020-01-30T18:20:31.000Z</published>
    <updated>2020-01-30T18:27:29.195Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Error异常"><a href="#Error异常" class="headerlink" title="Error异常"></a><strong>Error异常</strong></h3><ul><li>Error是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM(Java 虚拟机)出现的问题。例如，Java虚拟机运行错误(Virtual MachineError)，当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止。Error表明系统JVM已经处于不可恢复的崩溃状态中。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Error异常&quot;&gt;&lt;a href=&quot;#Error异常&quot; class=&quot;headerlink&quot; title=&quot;Error异常&quot;&gt;&lt;/a&gt;&lt;strong&gt;Error异常&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Error是程序无法处理的错误，表示运行应用程序中较严
      
    
    </summary>
    
    
      <category term="异常" scheme="https://agui-coder.github.io/categories/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="Error" scheme="https://agui-coder.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>String类常用方法</title>
    <link href="https://agui-coder.github.io/2020/01/31/String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://agui-coder.github.io/2020/01/31/String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-30T17:27:09.000Z</published>
    <updated>2020-01-30T18:06:13.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a><strong>String类常用方法</strong></h3><table><thead><tr><th>方法</th><th>解释说明</th></tr></thead><tbody><tr><td>char charAt(int index)</td><td>返回字符串中第index个字符</td></tr><tr><td>boolean equals(String other)</td><td>如果字符串与other相等，返回true；否则，返回false</td></tr><tr><td>boolean equalsIgnoreCase(String other)</td><td>如果字符串与other相等(忽略大小写)，则返回true;否则，返回false。</td></tr><tr><td>int indexOf(String str)</td><td>返回开头开始查找第一个字符串str在字符串的索引位置。如果没有找到字符串str，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>返回末尾开始查找第一个字符串str在字符串的索引位置。如果没有找到字符串str，则返回-1</td></tr><tr><td>int length()</td><td>返回字符串的长度</td></tr><tr><td>String replace(char oldChar,char newChar)</td><td>返回一个新串，它是通过newChar替换此字符串中出现的所有oldChar而生成的</td></tr><tr><td>boolean startsWith(String prefix)</td><td>如果字符串以prefix开始则返回true</td></tr><tr><td>boolean endsWith(String prefix)</td><td>如果字符串以prefix结尾则返回true</td></tr><tr><td>String substring(int beginInedex)</td><td>返回一个新字符串，该串包含从原始字符串beginIndex到串尾</td></tr><tr><td>String substring(int beginInedex，int endIndex)</td><td>返回一个新字符串，该串包含从原始字符串beginIndex到串尾或 endIndex-1的所有字符</td></tr><tr><td>String toLowerCase()</td><td>返回一个新字符串，该串包含从原始字符串中所有大小写字母该串小写字母</td></tr><tr><td>String toUpperCase()</td><td>返回一个新字符串，该串包含从原始字符串中所有大小写字母该串小写字母</td></tr><tr><td>String trim()</td><td>返回一个新字符串，该串删除了原始字符串头部和尾部的空格</td></tr></tbody></table><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><p>public class Mother {<br>    public static void main(String[] args) {<br>        String str1 = “As df”;<br>        String str2 = “as df”;<br>        System.out.println(str1.charAt(3));//<label style="color:red">字体提取下标为3的字符</label><br>        System.out.println(str2.length());//<label style="color:red">字符串的长度</label><br>        System.out.println(str1.equals(str2));//<label style="color:red">比较两个字符串是否相等</label><br>        System.out.println(str1.equalsIgnoreCase(str2));//<label style="color:red">比较两个字符串（忽略大小写）</label><br>        System.out.println(str1.indexOf(“d”));//<label style="color:red">字符串s1中是否包含d,并返回索引位置。</label><br>        System.out.println(str1.indexOf(“g”));//<label style="color:red">字符串s1中是否包含g，返回-1</label><br>        String str3 = str1.replace(‘ ‘, ‘-‘);//<label style="color:red">将s1中的空格替换成&amp;</label><br>        System.out.println(“result is :” + str3);<br>        String s = “”;<br>        String s1 = “How are you?”;<br>        System.out.println(s1.startsWith(“How”));//<label style="color:red">是否以How开头</label><br>        System.out.println(s1.endsWith(“you”));//<label style="color:red">是否以you结尾</label><br>        s = s1.substring(4);//<label style="color:red">提取子字符串：从下标为4的开始到字符串结尾为止</label><br>        System.out.println(s);<br>        s = s1.substring(4, 7);//<label style="color:red">提取子字符串：下标[4, 7) 不包括7</label><br>        System.out.println(s);<br>        s = s1.toLowerCase();//<label style="color:red">转小写<br>        System.out.println(s);</label><br>        s = s1.toUpperCase();//<label style="color:red">转大写<br>        System.out.println(s);</label><br>        String s2 = “  How old are you!! “;<br>        s = s2.trim();//<label style="color:red">去除字符串首尾的空格。注意：中间的空格不能去除</label><br>        System.out.println(s);<br>        System.out.println(s2);//<label style="color:red">因为String是不可变字符串，所以s2不变</label><br>    }<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String类常用方法&quot;&gt;&lt;a href=&quot;#String类常用方法&quot; class=&quot;headerlink&quot; title=&quot;String类常用方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;String类常用方法&lt;/strong&gt;&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="常用方法" scheme="https://agui-coder.github.io/categories/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="String" scheme="https://agui-coder.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java基础总结5</title>
    <link href="https://agui-coder.github.io/2020/01/31/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%935/"/>
    <id>https://agui-coder.github.io/2020/01/31/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%935/</id>
    <published>2020-01-30T17:19:11.000Z</published>
    <updated>2020-01-30T17:26:23.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String类与常量池"><a href="#String类与常量池" class="headerlink" title="String类与常量池"></a><strong>String类与常量池</strong></h3><ul><li>全局字符串常量池(String Pool):全局字符串常量池中存放的内容是在类加载完成后存到String Pool中的，在每个VM中只有一份，存放的是字符串常量的引用值(在堆中生成字符串对象实例)。</li><li>class文件常量池(Class Constant Pool):class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量(文本字符串、final常量等)和符号引用。</li><li>运行时常量池(Runtime Constant Pool):运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li><li>lass常量池中存放一些符号引用，然后类加载之后，将class常量池中存放的符号引用转存到运行时常量池中，然后经过验证，准备阶段之后，在堆中生成驻留字符串的实例对象，然后将这个对象的引用存到全局String Pool中，也就是String Pool中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，那么就直接查询String Pool，保证String Pool里的引用值与运行时常量池中的引用值一致，大概整个过程就是这样了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String类与常量池&quot;&gt;&lt;a href=&quot;#String类与常量池&quot; class=&quot;headerlink&quot; title=&quot;String类与常量池&quot;&gt;&lt;/a&gt;&lt;strong&gt;String类与常量池&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局字符串常量池(St
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="常量池" scheme="https://agui-coder.github.io/tags/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java基础总结4</title>
    <link href="https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%934/"/>
    <id>https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%934/</id>
    <published>2020-01-30T11:10:22.000Z</published>
    <updated>2020-01-30T17:18:21.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><strong>内部类</strong></h3><ul><li>内部类的作用：内部类可以直接访问外部类的私有属性，内部类被当成外部类的成员。但内部类不能访问内部类属性，</li><li>内部类的使用场合：当只为外部类提供服务的情况下可以考虑使用内部类，每个内部类可以独立基础一个类或者实现接口，所以无论外部类继承或者实现接口对于内部类没有影响。</li><li>内部类可以使用public、default、protected 、private以及static修饰。而外部顶级类(我们以前接触的类)只能使用public和default修饰。<br><strong>非静态内部类</strong></li><li>i. 非静态内部类必须寄存在一个外部类对象里。因此，如果有一个非静态内部类对象那么一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象。</li><li>ii. 非静态内部类可以直接访问外部类的成员，但是外部类不能直接访问非静态内部类成员。</li><li>iii. 非静态内部类不能有静态方法、静态属性和静态初始化块。</li><li>iv. 外部类的静态方法、静态代码块不能访问非静态内部类，包括不能使用非静态内部类定义变量、创建实例。<br><strong>成员变量的访问要点</strong></li><li><ol><li>内部类里方法的局部变量：变量名。</li></ol></li><li><ol start="2"><li>内部类属性：this.变量名</li></ol></li><li><ol start="3"><li>外部类属性：外部类名.this.变量名。</li></ol><strong>内部类的访问</strong></li><li>1.外部类定义内部类new Inner()</li><li>2外部类以外的地方使用非静态内部类： Outer.Iennr varname = new Outer().new Inner()<br><strong>静态内部类</strong></li><li>定义：static class ClassName{}</li><li>使用要点：静态内部类的实例方法不能访问外部类的实例方法，静态内部类相当于静态成员可以“静态内部类.名字”的方式访问静态内部类的静态成员，通过new静态内部类()访问内部类的实例。<br> <strong>匿名内部类</strong>只使用一次的类</li><li>new 父类构造器(实参表)\实现接口(){}</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;&lt;strong&gt;内部类&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内部类的作用：内部类可以直接访问外部类的私有属性，内部类被当成外部类的成员。但内部类不
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="内部类" scheme="https://agui-coder.github.io/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java基础总结3</title>
    <link href="https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%933/"/>
    <id>https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%933/</id>
    <published>2020-01-30T09:51:02.000Z</published>
    <updated>2020-01-30T11:29:30.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面对对象知识进阶"><a href="#面对对象知识进阶" class="headerlink" title="面对对象知识进阶"></a><strong>面对对象知识进阶</strong></h3><ul><li>Java中只有单继承，接口可以多继承，继承之后子类拥有父类的全部属性和方法(除了构造器与被private修饰的属性和方法)</li><li>子类通过重写父类方法实现多态的必要条件</li><li>重写要方法名与形参列表相同，返回值类型和声明异常类型小于父类，访问权限子类要大于父类</li><li>可以通过重写toString方法改变打印输出或者字符串连接对象时的输出值</li><li>“==”双方式基本类型比值，是引用类型比地址</li><li>equals比较双方的内容，可以根据自己要求重写equals</li><li>super是直接父类对象的引用。可以通过super来访问父类中被子类覆盖的方法或属性。</li><li>有父类当调用属性/或者时从下向上找，构造器由上往下找追溯到Object</li><li>封装是什么？封装就是加属性加方法，优化代码。</li><li>多态是什么？多态就是new的时候左边是父类，右边是子类。运行时多态的前提：继承（实现），重写，向上转型与向下转型。通过对象的向上转型可以实现接受参数的统一，向下转型可以实现子类扩充的调用（一般不操作向下转型，有安全隐患）</li><li>抽象类：有抽象方法的类必须定义抽象类，抽象类只能被继承，抽象类必须被子类实现</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。如果你是天使，则必须能飞。接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</li><li>接口的声明[只能是public或者默认]，接口能多继承，常量总是被public static final修饰。接口中的方法总是被public abstract修饰。</li><li>接口可用于声明引用变量类型，类实现接口的方法只能是public</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面对对象知识进阶&quot;&gt;&lt;a href=&quot;#面对对象知识进阶&quot; class=&quot;headerlink&quot; title=&quot;面对对象知识进阶&quot;&gt;&lt;/a&gt;&lt;strong&gt;面对对象知识进阶&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java中只有单继承，接口可以多继承，继承之后
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>&#39;Java基础总结2&#39;</title>
    <link href="https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%932/"/>
    <id>https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%932/</id>
    <published>2020-01-30T08:36:45.000Z</published>
    <updated>2020-01-30T09:50:02.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面对对象基础知识"><a href="#面对对象基础知识" class="headerlink" title="面对对象基础知识"></a><strong>面对对象基础知识</strong></h3><ul><li>类的定义方式，每个源文件必须且只有一个public class,并且类名与文件名一致</li><li>类一般有三个成员：属性field、方法method、构造器constructor</li><li>构造器：用于对象的初始化，构造器名称必须与类名一致，通过new关键字调用构造器</li><li>方法：[修饰符1 修饰符2……] 返回值类型 方法名(形式参数列表){}</li><li>this的本质：指代当前方法所在类的对象，常用于二义性，也可以调用重载的构造方法但必须在方法第一位，this不能用于static方法中。</li><li>static:在static方法中不能访问<em>非static成员</em>,static修饰的成员和方法，从属于类一般用“类名.类属性、方法”普通变量和方法从属于对象。</li><li>静态化初始块当有父类就先执行父类的静态初始化块，构造方法也是一样。</li><li>参数传递机制:传的都是副本，原件不变。</li><li>包的命名:域名倒写</li><li>静态导入:import static java.lang.Math.*;/导入Math类的所有静态属性                  import static java.lang.Math.PI;//导入Math类的PI属性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面对对象基础知识&quot;&gt;&lt;a href=&quot;#面对对象基础知识&quot; class=&quot;headerlink&quot; title=&quot;面对对象基础知识&quot;&gt;&lt;/a&gt;&lt;strong&gt;面对对象基础知识&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类的定义方式，每个源文件必须且只有一个publ
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础总结1</title>
    <link href="https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://agui-coder.github.io/2020/01/30/Java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-30T06:34:00.000Z</published>
    <updated>2020-01-30T11:29:30.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标识符的使用规范"><a href="#标识符的使用规范" class="headerlink" title="标识符的使用规范"></a><strong>标识符的使用规范</strong></h3><p>标识符是用来给变量、类、方法以及包进行命名的，如Welcome、main、System、age、name、gender等。标识符需要遵守一定的规则：</p><ul><li><p>标识符必须以字母、下划线_、美元符号$开头。  </p></li><li><p>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。</p></li><li><p>Java 标识符大小写敏感，且长度无限制。</p></li><li><p>标识符不可以是Java的关键字。</p></li><li><p>表示类名的表示符：每个单词的首字母大写，如Man,GoodMan</p></li><li><p>表示方法和变量的标识符：每个单词小写，从第二个单词开始首字母大写</p></li></ul><h3 id="Java中的关键字、保留字"><a href="#Java中的关键字、保留字" class="headerlink" title="Java中的关键字、保留字"></a><strong>Java中的关键字、保留字</strong></h3><table><thead><tr><th></th><th>关键字</th><th>保留字</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>assert</td><td>boolean</td><td>break</td><td>byte</td><td>case</td></tr><tr><td>catch</td><td>char</td><td>class</td><td>const</td><td>continue</td><td>default</td></tr><tr><td>do</td><td>double</td><td>else</td><td>extends</td><td>final</td><td>finally</td></tr><tr><td>float</td><td>for</td><td>goto</td><td>if</td><td>implements</td><td>import</td></tr><tr><td>instanceof</td><td>int</td><td>interface</td><td>long</td><td>native</td><td>new</td></tr><tr><td>null</td><td>package</td><td>privvate</td><td>protected</td><td>public</td><td>return</td></tr><tr><td>short</td><td>static</td><td>strictfp</td><td>super</td><td>switch</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>throws</td><td>transient</td><td>try</td><td>void</td></tr><tr><td>voaltile</td><td>while</td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a><strong>变量的分类</strong></h3><table><thead><tr><th>类型</th><th>声明位置</th><th>从属于</th><th>生命周期</th><th>使用</th></tr></thead><tbody><tr><td>局部变量</td><td>方法或语句块内部</td><td>方法/语句块</td><td>从声明位置开始，直达方法或语句块执行完毕，局部变量消失</td><td>变量名</td></tr><tr><td>成员变量</td><td>类内部，方法外部</td><td>对象</td><td>对象创建，成员变量也跟着创建。对象消失，成员变量也跟着消失</td><td>对象.变量名</td></tr><tr><td>静态变量</td><td>类内部，static修饰</td><td>类</td><td>类被加载，静态变量就有效；类被卸载，静态变量消失</td><td>class.变量名</td></tr></tbody></table><h3 id="变量和常量的命名规范"><a href="#变量和常量的命名规范" class="headerlink" title="变量和常量的命名规范"></a><strong>变量和常量的命名规范</strong></h3><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量： 首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE </li><li>类名：首字母大写和驼峰原则：Man,GoodMan</li><li>方法名：首字母小写和驼峰原则：run(),runRun()</li><li>常量的命名格式：final  type  varName = value;用finald定义,初始化后不能更改</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h3><table><thead><tr><th>类型</th><th>所占空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>-2^7 ~ 2^7-1 (-128 ~ 127)</td></tr><tr><td>short</td><td>2字节</td><td>-2^15 ~ 2^15-1 (-32768 ~ 32767)</td></tr><tr><td>int</td><td>4字节</td><td>-2^31~2^31-1 (约21亿）</td></tr><tr><td>long</td><td>8字节</td><td>-2^63~2^63-1</td></tr><tr><td>flaot</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr><tr><td>char</td><td>2字节</td><td></td></tr><tr><td>boolean</td><td>占一位</td><td></td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h3><table><thead><tr><th>运算符</th><th></th></tr></thead><tbody><tr><td>算术运算符</td><td>+，-，*，/，%，++，–</td></tr><tr><td>赋值运算符</td><td>=</td></tr><tr><td>扩充运算符</td><td>+=，-=，*=，/=</td></tr><tr><td>关系运算符</td><td>&gt;,&lt;,&gt;=,&lt;=,==,!=,instanceof</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;，丨丨，！，^</td></tr><tr><td>位运算符</td><td>&amp;&amp;，！，^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;,丨丨</td></tr><tr><td>条件运算符</td><td>？，：</td></tr><tr><td>字符串连接符</td><td>+</td></tr></tbody></table><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a><strong>控制语句</strong></h3><p>1、if单选择结构：if(boolean){}true执行，false不执行。</p><p>2、if-else双选择结构：if(){true}elese{false}.</p><p>3、if-else多选择结构：if(){}else if(){}else if(){}……</p><p>4、switch(){case 值1：语句1;[break];case 值2：语句2；[break];……[default:默认语句；]}</p><p>5、while循环结构：while(){循环体}。</p><p>6、do{循环体}while().</p><p>7、for循环（初始表达式；布尔表达式；迭代因子）{}；</p><p>8、增强for循环(数据类型 循环赋值输出的变量(相当于for循环的i) : 定义的容器名){}</p><p>9、break强制破坏循环，不在执行循环，continue跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标识符的使用规范&quot;&gt;&lt;a href=&quot;#标识符的使用规范&quot; class=&quot;headerlink&quot; title=&quot;标识符的使用规范&quot;&gt;&lt;/a&gt;&lt;strong&gt;标识符的使用规范&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;标识符是用来给变量、类、方法以及包进行命名的，如Welco
      
    
    </summary>
    
    
      <category term="学习历程" scheme="https://agui-coder.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="标识符" scheme="https://agui-coder.github.io/tags/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
      <category term="关键字" scheme="https://agui-coder.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="变量" scheme="https://agui-coder.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="数据类型" scheme="https://agui-coder.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="运算符" scheme="https://agui-coder.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="控制语句" scheme="https://agui-coder.github.io/tags/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>My first post</title>
    <link href="https://agui-coder.github.io/2020/01/30/my-first-post/"/>
    <id>https://agui-coder.github.io/2020/01/30/my-first-post/</id>
    <published>2020-01-29T21:08:31.000Z</published>
    <updated>2020-01-30T06:32:50.017Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一篇文章,我从2020年1月15日开始自学Java，历时15天走马观花式的学习Java基础与进阶，开始觉得烦躁，所以进行写博客，总结知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我第一篇文章,我从2020年1月15日开始自学Java，历时15天走马观花式的学习Java基础与进阶，开始觉得烦躁，所以进行写博客，总结知识。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://agui-coder.github.io/2020/01/30/hello-world/"/>
    <id>https://agui-coder.github.io/2020/01/30/hello-world/</id>
    <published>2020-01-29T20:33:51.273Z</published>
    <updated>2020-01-29T20:33:51.273Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
